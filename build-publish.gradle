/*
 * MAVEN上传(中心库/私有库/本地库)
 *
 * (1) 必要配置文件: C:\Users\<user>\.gradle\gradle.properties
 * # 必要:中心库配置
 * signing.keyId=<私钥ID> (gpg -K 查看)
 * signing.password=<私钥文件的密码>
 * signing.secretKeyRingFile=C:/Users/<user>/AppData/Roaming/gnupg/secring.gpg
 * sonatype_user=<中心库UserToken用户名>
 * sonatype_password=<中心库UserToken密码>
 * # 可选:私有库配置
 * private_release_url=<私有库RELEASE地址>
 * private_snapshot_url=<私有库SNAPSHOT地址>
 * private_user=<私有库用户名>
 * private_password=<私有库密码>
 *
 * (2) 在gradle-local.properties中选择上传到中心库/私有库/本地库
 *
 * (3) 发布
 * [发布到中心库] 选择 'upload_target=maven', 刷新Gradle, 执行 'gradlew publishToMavenCentralPortal'
 * [发布到私有库] 选择 'upload_target=private', 刷新Gradle, 执行 'gradlew publish'
 * [发布到~/.m2库] 选择 'upload_target=local', 刷新Gradle, 执行 'gradlew publishToMavenLocal'
 *
 * maven-publish文档:https://docs.gradle.org/current/userguide/publishing_maven.html
 * signing文档:https://docs.gradle.org/current/userguide/signing_plugin.html#signing_plugin
 * 老协议OSSRH迁移到CentralPortal文档: https://central.sonatype.org/faq/what-is-different-between-central-portal-and-legacy-ossrh/#process-to-migrate
 * 第三方发布插件: https://github.com/yananhub/flying-gradle-plugin
 * 关于中央库UserToken: sonatype_user和sonatype_password不是中心库账户, 是UserToken, 在https://central.sonatype.com/account产生
 */

// 库模块/BOM模块
configure(subprojects.findAll { it.PROJECT_GROUP in ['public-java', 'public-spring', 'public-bom'] }) {

    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    // [Central Portal|第三方发布插件] https://github.com/yananhub/flying-gradle-plugin (此插件要求JDK版本17+)
    // 老协议OSSRH迁移到CentralPortal的临时解决方案, 利用maven-publish构建/生成文档/签名, 发布到本地repository_publishTempPath
    // 这个第三方发布插件将本地repository_publishTempPath中的文件打包上传到中心库
    if (upload_target == 'maven') {

        apply plugin: 'tech.yanand.maven-central-publish'

        mavenCentral {
            // "用户名:密码".getBytes() 然后转为BASE64, 注意用户名密码不是中心库账户, 是UserToken, 在https://central.sonatype.com/account产生
            authToken = (sonatype_user + ':' + sonatype_password).bytes.encodeBase64().toString()
            // USER_MANAGED:只上传不自动发布, AUTOMATIC:自动发布
            publishingType = 'USER_MANAGED'
            // 每次上传等待服务端处理完成的时间, 秒
            maxWait = 600
        }
    }

    // 发布配置
    publishing {
        // 构建信息
        publications {
            mavenJava(MavenPublication) {
                groupId = project.group
                // 构建名默认是子工程名, 也可以在子工程的gradle.properties中配置upload_artifact_id来指定构建名
                artifactId = project.hasProperty('upload_artifact_id') ? project.upload_artifact_id : project.name
                version = project.version
                // 配置: 此处可以配置POM信息
                pom {
                    name = project.name
                    description = 'Comprehensive Java library'
                    url = 'https://github.com/shepherdviolet/glacimon'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'shepherdviolet'
                            name = 'Shepherd Violet'
                            email = 'shepherdviolet@163.com'
                        }
                    }
                    scm {
                        connection = 'scm:git@github.com:shepherdviolet/glacimon.git'
                        developerConnection = 'git@github.com:shepherdviolet/glacimon.git'
                        url = 'scm:git@github.com:shepherdviolet/glacimon.git'
                    }
                }
            }
        }
        // 仓库信息
        repositories {
            // 配置: 此处可配置仓库地址
            maven {
                if (upload_target == 'maven') {
                    // 中心库
                    // 先用maven-publish构建/生成文档/签名, 发布到本地repository_publishTempPath
                    // 第三方发布插件将本地repository_publishTempPath中的文件打包上传到中心库
                    url = repository_publishTempPath
                    // 原OSSRH协议的中心库发布配置 (废弃)
//                    def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
//                    def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
//                    url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//                    credentials {
//                        username = sonatype_user
//                        password = sonatype_password
//                    }
                } else if (upload_target == 'private') {
                    // 私有库, 例如: http://localhost:8081/nexus/content/repositories/reponame/
                    def releasesRepoUrl = private_release_url
                    def snapshotsRepoUrl = private_snapshot_url
                    url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    allowInsecureProtocol true
                    credentials {
                        username = private_user
                        password = private_password
                    }
                } else {
                    // 本地
                    def releasesRepoUrl = repository_localRepositoryPath
                    def snapshotsRepoUrl = repository_localRepositoryPath
                    url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                }
            }
        }
    }

    // 本地发布时跳过
    if (upload_target != 'local') {

        // 签名
        signing {
            sign publishing.publications.mavenJava
        }

    }

}

// 库模块
configure(subprojects.findAll { it.PROJECT_GROUP in ['public-java', 'public-spring'] }) {

    // JAVADOC配置
    javadoc {
        // 禁用JAVA8的JAVADOC检查, 解决javadoc不规范报错的问题
        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
        // JAVA9 启用H5文档
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    // 本地发布时跳过
    if (upload_target != 'local') {

        // 编译时产生源代码jar
        tasks.register('sourcesJar', Jar) {
            from sourceSets.main.allJava
            archiveClassifier.set 'sources'
        }

        // 编译时产生JAVADOC
        tasks.register('javadocJar', Jar) {
            from javadoc
            archiveClassifier.set 'javadoc'
        }

    }

    // 发布配置
    publishing {
        // 构建信息
        publications {
            mavenJava(MavenPublication) {
                // 添加Java
                from components.java
                // 添加源码/JavaDoc
                if (upload_target != 'local') {
                    artifact sourcesJar
                    artifact javadocJar
                }
                // 自动处理依赖版本
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }
    }

}

// BOM模块
configure(subprojects.findAll { it.PROJECT_GROUP in ['public-bom'] }) {

    // 发布配置
    publishing {
        publications {
            mavenJava(MavenPublication) {
                // 添加BOM
                from components.javaPlatform
            }
        }
    }

}
